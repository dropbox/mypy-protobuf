test_negative/negative.py:28: error: "Simple1" has no attribute "SerializeToStringg"
test_negative/negative.py:31: error: Argument 1 to "ParseFromString" of "Message" has incompatible type "Simple1"; expected "ByteString"
test_negative/negative.py:34: error: Argument 1 to "CopyFrom" of "Message" has incompatible type "bytes"; expected "Simple1"
test_negative/negative.py:38: error: Argument 1 to "extend" of "list" has incompatible type "RepeatedScalarFieldContainer[str]"; expected "Iterable[int]"
test_negative/negative.py:40: error: Argument "foo" to "TestMessage" has incompatible type "int"; expected "Optional[str]"
test_negative/negative.py:43: error: Incompatible types in assignment (expression has type "int", variable has type "OuterEnumValue")
test_negative/negative.py:46: error: Argument 1 to "HasField" of "Simple1" has incompatible type "Literal['garbage']"; expected "Union[Literal['a_boolean'], Literal[b'a_boolean'], Literal['a_enum'], Literal[b'a_enum'], Literal['a_external_enum'], Literal[b'a_external_enum'], Literal['a_inner'], Literal[b'a_inner'], Literal['a_nested'], Literal[b'a_nested'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['a_string'], Literal[b'a_string'], Literal['a_uint32'], Literal[b'a_uint32'], Literal['inner_enum'], Literal[b'inner_enum'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['inner_message'], Literal[b'inner_message'], Literal['nested_enum'], Literal[b'nested_enum'], Literal['nested_message'], Literal[b'nested_message'], Literal['no_package'], Literal[b'no_package'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:47: error: Argument 1 to "HasField" of "Simple1" has incompatible type "Literal['a_repeated_string']"; expected "Union[Literal['a_boolean'], Literal[b'a_boolean'], Literal['a_enum'], Literal[b'a_enum'], Literal['a_external_enum'], Literal[b'a_external_enum'], Literal['a_inner'], Literal[b'a_inner'], Literal['a_nested'], Literal[b'a_nested'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['a_string'], Literal[b'a_string'], Literal['a_uint32'], Literal[b'a_uint32'], Literal['inner_enum'], Literal[b'inner_enum'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['inner_message'], Literal[b'inner_message'], Literal['nested_enum'], Literal[b'nested_enum'], Literal['nested_message'], Literal[b'nested_message'], Literal['no_package'], Literal[b'no_package'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:51: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['garbage']"; expected "Union[Literal['OuterMessage3'], Literal[b'OuterMessage3'], Literal['_an_optional_string'], Literal[b'_an_optional_string'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['an_optional_string'], Literal[b'an_optional_string'], Literal['b_oneof'], Literal[b'b_oneof'], Literal['b_oneof_1'], Literal[b'b_oneof_1'], Literal['b_oneof_2'], Literal[b'b_oneof_2'], Literal['bool'], Literal[b'bool'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message'], Literal[b'outer_message'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:52: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['a_string']"; expected "Union[Literal['OuterMessage3'], Literal[b'OuterMessage3'], Literal['_an_optional_string'], Literal[b'_an_optional_string'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['an_optional_string'], Literal[b'an_optional_string'], Literal['b_oneof'], Literal[b'b_oneof'], Literal['b_oneof_1'], Literal[b'b_oneof_1'], Literal['b_oneof_2'], Literal[b'b_oneof_2'], Literal['bool'], Literal[b'bool'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message'], Literal[b'outer_message'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:53: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['outer_enum']"; expected "Union[Literal['OuterMessage3'], Literal[b'OuterMessage3'], Literal['_an_optional_string'], Literal[b'_an_optional_string'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['an_optional_string'], Literal[b'an_optional_string'], Literal['b_oneof'], Literal[b'b_oneof'], Literal['b_oneof_1'], Literal[b'b_oneof_1'], Literal['b_oneof_2'], Literal[b'b_oneof_2'], Literal['bool'], Literal[b'bool'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message'], Literal[b'outer_message'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:54: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['a_repeated_string']"; expected "Union[Literal['OuterMessage3'], Literal[b'OuterMessage3'], Literal['_an_optional_string'], Literal[b'_an_optional_string'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['an_optional_string'], Literal[b'an_optional_string'], Literal['b_oneof'], Literal[b'b_oneof'], Literal['b_oneof_1'], Literal[b'b_oneof_1'], Literal['b_oneof_2'], Literal[b'b_oneof_2'], Literal['bool'], Literal[b'bool'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message'], Literal[b'outer_message'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:57: error: Argument 1 to "ClearField" of "Simple1" has incompatible type "Literal['garbage']"; expected "Union[Literal['a_boolean'], Literal[b'a_boolean'], Literal['a_enum'], Literal[b'a_enum'], Literal['a_external_enum'], Literal[b'a_external_enum'], Literal['a_inner'], Literal[b'a_inner'], Literal['a_nested'], Literal[b'a_nested'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['a_repeated_string'], Literal[b'a_repeated_string'], Literal['a_string'], Literal[b'a_string'], Literal['a_uint32'], Literal[b'a_uint32'], Literal['inner_enum'], Literal[b'inner_enum'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['inner_message'], Literal[b'inner_message'], Literal['nested_enum'], Literal[b'nested_enum'], Literal['nested_message'], Literal[b'nested_message'], Literal['no_package'], Literal[b'no_package'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof'], Literal['rep_inner_enum'], Literal[b'rep_inner_enum'], Literal['rep_inner_message'], Literal[b'rep_inner_message']]"
test_negative/negative.py:60: error: Argument 1 to "ClearField" of "SimpleProto3" has incompatible type "Literal['garbage']"; expected "Union[Literal['OuterEnum'], Literal[b'OuterEnum'], Literal['OuterMessage3'], Literal[b'OuterMessage3'], Literal['_an_optional_string'], Literal[b'_an_optional_string'], Literal['a_oneof'], Literal[b'a_oneof'], Literal['a_oneof_1'], Literal[b'a_oneof_1'], Literal['a_oneof_2'], Literal[b'a_oneof_2'], Literal['a_outer_enum'], Literal[b'a_outer_enum'], Literal['a_repeated_string'], Literal[b'a_repeated_string'], Literal['a_string'], Literal[b'a_string'], Literal['an_optional_string'], Literal[b'an_optional_string'], Literal['b_oneof'], Literal[b'b_oneof'], Literal['b_oneof_1'], Literal[b'b_oneof_1'], Literal['b_oneof_2'], Literal[b'b_oneof_2'], Literal['bool'], Literal[b'bool'], Literal['inner_enum'], Literal[b'inner_enum'], Literal['inner_enum_in_oneof'], Literal[b'inner_enum_in_oneof'], Literal['map_message'], Literal[b'map_message'], Literal['map_scalar'], Literal[b'map_scalar'], Literal['outer_enum_in_oneof'], Literal[b'outer_enum_in_oneof'], Literal['outer_message'], Literal[b'outer_message'], Literal['outer_message_in_oneof'], Literal[b'outer_message_in_oneof']]"
test_negative/negative.py:63: error: Argument 1 to "WhichOneof" of "Simple1" has incompatible type "Literal['garbage']"; expected "Union[Literal['a_oneof'], Literal[b'a_oneof']]"
test_negative/negative.py:65: error: Incompatible types in assignment (expression has type "Union[Literal['a_oneof_1'], Literal['a_oneof_2'], Literal['outer_message_in_oneof'], Literal['outer_enum_in_oneof'], Literal['inner_enum_in_oneof']]", variable has type "int")
test_negative/negative.py:69: error: Argument 1 to "HasField" of "Simple2" has incompatible type "Union[Literal['a_oneof_1'], Literal['a_oneof_2'], Literal['outer_message_in_oneof'], Literal['outer_enum_in_oneof'], Literal['inner_enum_in_oneof']]"; expected "Union[Literal['a_string'], Literal[b'a_string']]"
test_negative/negative.py:72: error: No overload variant of "WhichOneof" of "SimpleProto3" matches argument type "str"
test_negative/negative.py:72: note: Possible overload variants:
test_negative/negative.py:72: note:     def WhichOneof(self, oneof_group: Union[Literal['_an_optional_string'], Literal[b'_an_optional_string']]) -> Literal['an_optional_string']
test_negative/negative.py:72: note:     def WhichOneof(self, oneof_group: Union[Literal['a_oneof'], Literal[b'a_oneof']]) -> Union[Literal['a_oneof_1'], Literal['a_oneof_2'], Literal['outer_message_in_oneof'], Literal['outer_enum_in_oneof'], Literal['inner_enum_in_oneof']]
test_negative/negative.py:72: note:     def WhichOneof(self, oneof_group: Union[Literal['b_oneof'], Literal[b'b_oneof']]) -> Union[Literal['b_oneof_1'], Literal['b_oneof_2']]
test_negative/negative.py:74: error: Incompatible types in assignment (expression has type "Union[Literal['a_oneof_1'], Literal['a_oneof_2'], Literal['outer_message_in_oneof'], Literal['outer_enum_in_oneof'], Literal['inner_enum_in_oneof']]", variable has type "int")
test_negative/negative.py:77: error: Argument 1 to "HasField" of "Simple2" has incompatible type "Union[Literal['a_oneof_1'], Literal['a_oneof_2'], Literal['outer_message_in_oneof'], Literal['outer_enum_in_oneof'], Literal['inner_enum_in_oneof']]"; expected "Union[Literal['a_string'], Literal[b'a_string']]"
test_negative/negative.py:81: error: Incompatible types in assignment (expression has type "_ExtensionFieldDescriptor[Simple1, Extensions1]", variable has type "int")
test_negative/negative.py:82: error: "Type[Extensions1]" has no attribute "bad"
test_negative/negative.py:84: error: "Extensions1" has no attribute "foo"
test_negative/negative.py:85: error: Incompatible types in assignment (expression has type "Extensions2", variable has type "Extensions1")
test_negative/negative.py:86: error: Invalid index type "str" for "_ExtensionDict[Simple1]"; expected type "_ExtensionFieldDescriptor[Simple1, <nothing>]"
test_negative/negative.py:87: error: Invalid index type "_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]" for "_ExtensionDict[Simple1]"; expected type "_ExtensionFieldDescriptor[Simple1, SeparateFileExtension]"
test_negative/negative.py:88: error: Unsupported operand types for in ("_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]" and "_ExtensionDict[Simple1]")
test_negative/negative.py:89: error: Argument 1 to "__delitem__" of "_ExtensionDict" has incompatible type "_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]"; expected "_ExtensionFieldDescriptor[Simple1, SeparateFileExtension]"
test_negative/negative.py:90: error: Argument 1 to "HasExtension" of "Message" has incompatible type "_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]"; expected "_ExtensionFieldDescriptor[Simple1, Any]"
test_negative/negative.py:91: error: Argument 1 to "ClearExtension" of "Message" has incompatible type "_ExtensionFieldDescriptor[Simple1, Extensions1]"; expected "_ExtensionFieldDescriptor[Simple2, Any]"
test_negative/negative.py:96: error: Incompatible types in assignment (expression has type "int", variable has type "_ExtensionFieldDescriptor[Simple1, Any]")
test_negative/negative.py:100: error: Incompatible types in assignment (expression has type "Union[Literal['b_oneof_1'], Literal['b_oneof_2']]", variable has type "Union[Literal['a_oneof_1'], Literal['a_oneof_2'], Literal['outer_message_in_oneof'], Literal['outer_enum_in_oneof'], Literal['inner_enum_in_oneof']]")
test_negative/negative.py:103: error: "Descriptor" has no attribute "Garbage"
test_negative/negative.py:104: error: "Descriptor" has no attribute "Garbage"
test_negative/negative.py:107: error: "EnumDescriptor" has no attribute "Garbage"
test_negative/negative.py:110: error: "FileDescriptor" has no attribute "Garbage"
test_negative/negative.py:117: error: "OuterEnumValue" has no attribute "FOO"
test_negative/negative.py:121: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "int"; expected "OuterEnumValue"
test_negative/negative.py:123: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "InnerEnumValue"; expected "OuterEnumValue"
test_negative/negative.py:125: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "InnerEnumValue"; expected "OuterEnumValue"
test_negative/negative.py:127: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "InnerEnumValue"; expected "OuterEnumValue"
test_negative/negative.py:131: error: "ScalarMap[int, str]" has no attribute "get_or_create"
test_negative/negative.py:133: error: No overload variant of "get" of "Mapping" matches argument type "str"
test_negative/negative.py:133: note: Possible overload variant:
test_negative/negative.py:133: note:     def get(self, key: int) -> Optional[str]
test_negative/negative.py:133: note:     <1 more non-matching overload not shown>
test_negative/negative.py:134: error: No overload variant of "get" of "Mapping" matches argument type "str"
test_negative/negative.py:134: note: Possible overload variant:
test_negative/negative.py:134: note:     def get(self, key: int) -> Optional[OuterMessage3]
test_negative/negative.py:134: note:     <1 more non-matching overload not shown>
test_negative/negative.py:137: error: Incompatible types in assignment (expression has type "Optional[str]", variable has type "int")
test_negative/negative.py:138: error: Incompatible types in assignment (expression has type "Optional[OuterMessage3]", variable has type "int")
Found 46 errors in 1 file (checked 20 source files)
