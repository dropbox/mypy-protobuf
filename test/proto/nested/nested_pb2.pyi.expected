# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from test.proto.test3_pb2 import (
    OuterEnum as test___proto___test3_pb2___OuterEnum,
)

from typing import (
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    Union as typing___Union,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class Nested(google___protobuf___message___Message):
    a = ... # type: test___proto___test3_pb2___OuterEnum.ClosedValueType

    def __init__(self,
        *,
        a : typing___Optional[test___proto___test3_pb2___OuterEnum.ClosedValueType] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Nested: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"a"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[u"a",b"a"]) -> None: ...

class AnotherNested(google___protobuf___message___Message):
    class NestedEnum(object):
        ClosedKeyType = typing___Union[typing_extensions___Literal['INVALID'],typing_extensions___Literal['ONE'],typing_extensions___Literal['TWO']]
        ClosedValueType = typing___Union[typing_extensions___Literal[0],typing_extensions___Literal[1],typing_extensions___Literal[2]]
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: ClosedValueType) -> str: ...
        @classmethod
        def Value(cls, name: ClosedKeyType) -> ClosedValueType: ...
        @classmethod
        def keys(cls) -> typing___List[ClosedKeyType]: ...
        @classmethod
        def values(cls) -> typing___List[ClosedValueType]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[ClosedKeyType, ClosedValueType]]: ...
        INVALID: typing_extensions___Literal[0]
        ONE: typing_extensions___Literal[1]
        TWO: typing_extensions___Literal[2]
    INVALID: typing_extensions___Literal[0]
    ONE: typing_extensions___Literal[1]
    TWO: typing_extensions___Literal[2]

    class NestedMessage(google___protobuf___message___Message):
        class NestedEnum2(object):
            ClosedKeyType = typing___Union[typing_extensions___Literal['UNDEFINED'],typing_extensions___Literal['NESTED_ENUM1'],typing_extensions___Literal['NESTED_ENUM2']]
            ClosedValueType = typing___Union[typing_extensions___Literal[0],typing_extensions___Literal[1],typing_extensions___Literal[2]]
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            @classmethod
            def Name(cls, number: ClosedValueType) -> str: ...
            @classmethod
            def Value(cls, name: ClosedKeyType) -> ClosedValueType: ...
            @classmethod
            def keys(cls) -> typing___List[ClosedKeyType]: ...
            @classmethod
            def values(cls) -> typing___List[ClosedValueType]: ...
            @classmethod
            def items(cls) -> typing___List[typing___Tuple[ClosedKeyType, ClosedValueType]]: ...
            UNDEFINED: typing_extensions___Literal[0]
            NESTED_ENUM1: typing_extensions___Literal[1]
            NESTED_ENUM2: typing_extensions___Literal[2]
        UNDEFINED: typing_extensions___Literal[0]
        NESTED_ENUM1: typing_extensions___Literal[1]
        NESTED_ENUM2: typing_extensions___Literal[2]

        s = ... # type: typing___Text
        b = ... # type: bool
        ne = ... # type: AnotherNested.NestedEnum.ClosedValueType
        ne2 = ... # type: AnotherNested.NestedMessage.NestedEnum2.ClosedValueType

        def __init__(self,
            *,
            s : typing___Optional[typing___Text] = None,
            b : typing___Optional[bool] = None,
            ne : typing___Optional[AnotherNested.NestedEnum.ClosedValueType] = None,
            ne2 : typing___Optional[AnotherNested.NestedMessage.NestedEnum2.ClosedValueType] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> AnotherNested.NestedMessage: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"b",u"ne",u"ne2",u"s"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[u"b",b"b",u"ne",b"ne",u"ne2",b"ne2",u"s",b"s"]) -> None: ...


    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> AnotherNested: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
